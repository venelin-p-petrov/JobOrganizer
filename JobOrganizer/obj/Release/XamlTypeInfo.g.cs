//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace JobOrganizer
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace JobOrganizer.JobOrganizer_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_AppViewModel() { return new global::JobOrganizer.ViewModels.AppViewModel(); }

        private object Activate_2_MonthViewModel() { return new global::JobOrganizer.ViewModels.MonthViewModel(); }

        private object Activate_3_WeekViewModel() { return new global::JobOrganizer.ViewModels.WeekViewModel(); }

        private object Activate_5_TaskViewModel() { return new global::JobOrganizer.ViewModels.TaskViewModel(); }

        private object Activate_11_LayoutAwarePage() { return new global::JobOrganizer.Common.LayoutAwarePage(); }

        private object Activate_12_HomePage() { return new global::JobOrganizer.Pages.HomePage(); }

        private object Activate_13_BooleanToVisibilityConverter() { return new global::JobOrganizer.Common.BooleanToVisibilityConverter(); }

        private object Activate_14_MonthPage() { return new global::JobOrganizer.Pages.MonthPage(); }

        private object Activate_15_SearchPage() { return new global::JobOrganizer.Pages.SearchPage(); }

        private object Activate_16_RadDatePicker() { return new global::Telerik.UI.Xaml.Controls.Input.RadDatePicker(); }

        private object Activate_22_RadTimePicker() { return new global::Telerik.UI.Xaml.Controls.Input.RadTimePicker(); }

        private object Activate_23_TaskPage() { return new global::JobOrganizer.Pages.TaskPage(); }

        private object Activate_24_WeekPage() { return new global::JobOrganizer.Pages.WeekPage(); }

        private object Activate_25_ChartAnnotationLabelDefinition() { return new global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition(); }

        private object Activate_27_HighlightStyle() { return new global::Telerik.UI.Xaml.Controls.Input.HighlightStyle(); }

        private object Activate_30_CalendarCellStyle() { return new global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle(); }

        private void VectorAdd_4_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::JobOrganizer.ViewModels.TaskViewModel>)instance;
            var newItem = (global::JobOrganizer.ViewModels.TaskViewModel)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Boolean":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Style));
                break;

            case "Double":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "Int32":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.DependencyObject":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DependencyObject));
                break;

            case "Windows.UI.Xaml.HorizontalAlignment":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.HorizontalAlignment));
                break;

            case "Windows.UI.Xaml.VerticalAlignment":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.VerticalAlignment));
                break;

            case "Windows.UI.Xaml.Media.FontFamily":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.FontFamily));
                break;

            case "Windows.UI.Xaml.Media.Brush":
                xamlType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.Brush));
                break;

            case "JobOrganizer.ViewModels.AppViewModel":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.ViewModels.AppViewModel), GetXamlTypeByName("JobOrganizer.Common.BindableBase"));
                userType.Activator = Activate_0_AppViewModel;
                userType.AddMemberName("Month");
                userType.AddMemberName("Week");
                userType.AddMemberName("TodayTasks");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>),
                                                   "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>");
                userType.AddMemberName("TomorrowTasks");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>),
                                                   "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>");
                userType.AddMemberName("TaskStartDate");
                userType.AddMemberName("TaskStartTime");
                userType.AddMemberName("TaskEndDate");
                userType.AddMemberName("TaskEndTime");
                userType.AddMemberName("TaskUntil");
                userType.AddMemberName("TaskRepeat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TaskTitle");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("TaskMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PrevMonth");
                userType.AddMemberName("NextMonth");
                userType.AddMemberName("PrevWeek");
                userType.AddMemberName("NextWeek");
                userType.AddMemberName("CreateTask");
                userType.AddMemberName("CancelCreateTask");
                userType.AddMemberName("SaveTasksCommand");
                userType.AddMemberName("LoadTasksCommand");
                xamlType = userType;
                break;

            case "JobOrganizer.Common.BindableBase":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Common.BindableBase), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "JobOrganizer.ViewModels.MonthViewModel":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.ViewModels.MonthViewModel), GetXamlTypeByName("JobOrganizer.Common.BindableBase"));
                userType.Activator = Activate_2_MonthViewModel;
                xamlType = userType;
                break;

            case "JobOrganizer.ViewModels.WeekViewModel":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.ViewModels.WeekViewModel), GetXamlTypeByName("JobOrganizer.Common.BindableBase"));
                userType.Activator = Activate_3_WeekViewModel;
                xamlType = userType;
                break;

            case "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>),
                                                   "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>");
                userType.CollectionAdd = VectorAdd_4_IList;
                xamlType = userType;
                break;

            case "JobOrganizer.ViewModels.TaskViewModel":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.ViewModels.TaskViewModel), GetXamlTypeByName("JobOrganizer.Common.BindableBase"));
                userType.Activator = Activate_5_TaskViewModel;
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Message");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Start");
                userType.AddMemberName("End");
                userType.AddMemberName("Until");
                userType.AddMemberName("Repeat");
                userType.AddMemberName("StartString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "JobOrganizer.Enumerations.RepeatInterval":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Enumerations.RepeatInterval), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Once", global::JobOrganizer.Enumerations.RepeatInterval.Once);
                userType.AddEnumValue("EveryDay", global::JobOrganizer.Enumerations.RepeatInterval.EveryDay);
                userType.AddEnumValue("WeekDay", global::JobOrganizer.Enumerations.RepeatInterval.WeekDay);
                userType.AddEnumValue("Week", global::JobOrganizer.Enumerations.RepeatInterval.Week);
                userType.AddEnumValue("Month", global::JobOrganizer.Enumerations.RepeatInterval.Month);
                userType.AddEnumValue("Year", global::JobOrganizer.Enumerations.RepeatInterval.Year);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "JobOrganizer.Common.LayoutAwarePage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_LayoutAwarePage;
                xamlType = userType;
                break;

            case "JobOrganizer.Pages.HomePage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Pages.HomePage), GetXamlTypeByName("JobOrganizer.Common.LayoutAwarePage"));
                userType.Activator = Activate_12_HomePage;
                xamlType = userType;
                break;

            case "JobOrganizer.Common.BooleanToVisibilityConverter":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Common.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "JobOrganizer.Pages.MonthPage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Pages.MonthPage), GetXamlTypeByName("JobOrganizer.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_MonthPage;
                xamlType = userType;
                break;

            case "JobOrganizer.Pages.SearchPage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Pages.SearchPage), GetXamlTypeByName("JobOrganizer.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_SearchPage;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.RadDatePicker":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.RadDatePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker"));
                userType.Activator = Activate_16_RadDatePicker;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.DateTimePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl"));
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("MinValue");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("AutoSizeWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReadOnly");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("EmptyContent");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("DisplayValueFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ValueString");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("SelectorBackgroundStyle");
                userType.AddMemberName("ItemLength");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ItemSpacing");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("SelectorFormat");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectorDefaultValue");
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("SelectorHeader");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("SelectorHeaderTemplate");
                userType.AddMemberName("ItemCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadHeaderedControl":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadHeaderedControl), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadControl":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.RadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Nullable<System.DateTime>":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Nullable<global::System.DateTime>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(global::System.Nullable<global::System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Standard", global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode.Standard);
                userType.AddEnumValue("Inline", global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode.Inline);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.RadTimePicker":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.RadTimePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker"));
                userType.Activator = Activate_22_RadTimePicker;
                xamlType = userType;
                break;

            case "JobOrganizer.Pages.TaskPage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Pages.TaskPage), GetXamlTypeByName("JobOrganizer.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_TaskPage;
                xamlType = userType;
                break;

            case "JobOrganizer.Pages.WeekPage":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::JobOrganizer.Pages.WeekPage), GetXamlTypeByName("JobOrganizer.Common.LayoutAwarePage"));
                userType.Activator = Activate_24_WeekPage;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_25_ChartAnnotationLabelDefinition;
                userType.AddMemberName("Format");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Template");
                userType.AddMemberName("DefaultVisualStyle");
                userType.AddMemberName("Location");
                userType.AddMemberName("HorizontalAlignment");
                userType.AddMemberName("VerticalAlignment");
                userType.AddMemberName("HorizontalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("VerticalOffset");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Left", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Left);
                userType.AddEnumValue("Top", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Top);
                userType.AddEnumValue("Right", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Right);
                userType.AddEnumValue("Bottom", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Bottom);
                userType.AddEnumValue("Inside", global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation.Inside);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.HighlightStyle), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_27_HighlightStyle;
                userType.AddMemberName("FontFamily");
                userType.AddMemberName("FontWeight");
                userType.AddMemberName("FontStyle");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("FontSize");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.FontWeightName":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.FontWeightName), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Black", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Black);
                userType.AddEnumValue("Bold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Bold);
                userType.AddEnumValue("ExtraBlack", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBlack);
                userType.AddEnumValue("ExtraBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraBold);
                userType.AddEnumValue("ExtraLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.ExtraLight);
                userType.AddEnumValue("Light", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Light);
                userType.AddEnumValue("Medium", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Medium);
                userType.AddEnumValue("Normal", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Normal);
                userType.AddEnumValue("SemiBold", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiBold);
                userType.AddEnumValue("SemiLight", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.SemiLight);
                userType.AddEnumValue("Thin", global::Telerik.UI.Xaml.Controls.Input.FontWeightName.Thin);
                xamlType = userType;
                break;

            case "Windows.UI.Text.FontStyle":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Windows.UI.Text.FontStyle), GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::Windows.UI.Text.FontStyle.Normal);
                userType.AddEnumValue("Oblique", global::Windows.UI.Text.FontStyle.Oblique);
                userType.AddEnumValue("Italic", global::Windows.UI.Text.FontStyle.Italic);
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle":
                userType = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle), GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_30_CalendarCellStyle;
                userType.AddMemberName("ContentStyle");
                userType.AddMemberName("DecorationStyle");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Telerik.UI.Xaml.Controls.Chart.Chart_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Grid.Grid_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Input.Input_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new global::Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_AppViewModel_Month(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.Month;
        }
        private void set_0_AppViewModel_Month(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.Month = (global::JobOrganizer.ViewModels.MonthViewModel)Value;
        }
        private object get_1_AppViewModel_Week(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.Week;
        }
        private void set_1_AppViewModel_Week(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.Week = (global::JobOrganizer.ViewModels.WeekViewModel)Value;
        }
        private object get_2_AppViewModel_TodayTasks(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TodayTasks;
        }
        private void set_2_AppViewModel_TodayTasks(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TodayTasks = (global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>)Value;
        }
        private object get_3_TaskViewModel_Title(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.Title;
        }
        private void set_3_TaskViewModel_Title(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_4_TaskViewModel_Message(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.Message;
        }
        private void set_4_TaskViewModel_Message(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_5_TaskViewModel_Start(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.Start;
        }
        private void set_5_TaskViewModel_Start(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.Start = (global::System.DateTime)Value;
        }
        private object get_6_TaskViewModel_End(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.End;
        }
        private void set_6_TaskViewModel_End(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.End = (global::System.DateTime)Value;
        }
        private object get_7_TaskViewModel_Until(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.Until;
        }
        private void set_7_TaskViewModel_Until(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.Until = (global::System.DateTime)Value;
        }
        private object get_8_TaskViewModel_Repeat(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.Repeat;
        }
        private void set_8_TaskViewModel_Repeat(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            that.Repeat = (global::JobOrganizer.Enumerations.RepeatInterval)Value;
        }
        private object get_9_TaskViewModel_StartString(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.TaskViewModel)instance;
            return that.StartString;
        }
        private object get_10_AppViewModel_TomorrowTasks(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TomorrowTasks;
        }
        private void set_10_AppViewModel_TomorrowTasks(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TomorrowTasks = (global::System.Collections.Generic.IList<global::JobOrganizer.ViewModels.TaskViewModel>)Value;
        }
        private object get_11_AppViewModel_TaskStartDate(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskStartDate;
        }
        private void set_11_AppViewModel_TaskStartDate(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskStartDate = (global::System.DateTime)Value;
        }
        private object get_12_AppViewModel_TaskStartTime(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskStartTime;
        }
        private void set_12_AppViewModel_TaskStartTime(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskStartTime = (global::System.DateTime)Value;
        }
        private object get_13_AppViewModel_TaskEndDate(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskEndDate;
        }
        private void set_13_AppViewModel_TaskEndDate(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskEndDate = (global::System.DateTime)Value;
        }
        private object get_14_AppViewModel_TaskEndTime(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskEndTime;
        }
        private void set_14_AppViewModel_TaskEndTime(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskEndTime = (global::System.DateTime)Value;
        }
        private object get_15_AppViewModel_TaskUntil(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskUntil;
        }
        private void set_15_AppViewModel_TaskUntil(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskUntil = (global::System.DateTime)Value;
        }
        private object get_16_AppViewModel_TaskRepeat(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskRepeat;
        }
        private void set_16_AppViewModel_TaskRepeat(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskRepeat = (global::System.String)Value;
        }
        private object get_17_AppViewModel_TaskTitle(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskTitle;
        }
        private void set_17_AppViewModel_TaskTitle(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskTitle = (global::System.String)Value;
        }
        private object get_18_AppViewModel_TaskMessage(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.TaskMessage;
        }
        private void set_18_AppViewModel_TaskMessage(object instance, object Value)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            that.TaskMessage = (global::System.String)Value;
        }
        private object get_19_AppViewModel_PrevMonth(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.PrevMonth;
        }
        private object get_20_AppViewModel_NextMonth(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.NextMonth;
        }
        private object get_21_AppViewModel_PrevWeek(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.PrevWeek;
        }
        private object get_22_AppViewModel_NextWeek(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.NextWeek;
        }
        private object get_23_AppViewModel_CreateTask(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.CreateTask;
        }
        private object get_24_AppViewModel_CancelCreateTask(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.CancelCreateTask;
        }
        private object get_25_AppViewModel_SaveTasksCommand(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.SaveTasksCommand;
        }
        private object get_26_AppViewModel_LoadTasksCommand(object instance)
        {
            var that = (global::JobOrganizer.ViewModels.AppViewModel)instance;
            return that.LoadTasksCommand;
        }
        private object get_27_DateTimePicker_Value(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.Value;
        }
        private void set_27_DateTimePicker_Value(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.Value = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_28_DateTimePicker_MinValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MinValue;
        }
        private void set_28_DateTimePicker_MinValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MinValue = (global::System.DateTime)Value;
        }
        private object get_29_DateTimePicker_DisplayMode(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.DisplayMode;
        }
        private void set_29_DateTimePicker_DisplayMode(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.DisplayMode = (global::Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode)Value;
        }
        private object get_30_DateTimePicker_AutoSizeWidth(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.AutoSizeWidth;
        }
        private void set_30_DateTimePicker_AutoSizeWidth(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.AutoSizeWidth = (global::System.Boolean)Value;
        }
        private object get_31_DateTimePicker_IsReadOnly(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsReadOnly;
        }
        private void set_31_DateTimePicker_IsReadOnly(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_32_DateTimePicker_EmptyContent(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContent;
        }
        private void set_32_DateTimePicker_EmptyContent(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContent = (global::System.Object)Value;
        }
        private object get_33_DateTimePicker_EmptyContentTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContentTemplate;
        }
        private void set_33_DateTimePicker_EmptyContentTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContentTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_34_DateTimePicker_DisplayValueFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.DisplayValueFormat;
        }
        private void set_34_DateTimePicker_DisplayValueFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.DisplayValueFormat = (global::System.String)Value;
        }
        private object get_35_DateTimePicker_ValueString(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ValueString;
        }
        private object get_36_DateTimePicker_MaxValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MaxValue;
        }
        private void set_36_DateTimePicker_MaxValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MaxValue = (global::System.DateTime)Value;
        }
        private object get_37_DateTimePicker_SelectorBackgroundStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorBackgroundStyle;
        }
        private void set_37_DateTimePicker_SelectorBackgroundStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorBackgroundStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_38_DateTimePicker_ItemLength(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemLength;
        }
        private void set_38_DateTimePicker_ItemLength(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemLength = (global::System.Double)Value;
        }
        private object get_39_DateTimePicker_ItemSpacing(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemSpacing;
        }
        private void set_39_DateTimePicker_ItemSpacing(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemSpacing = (global::System.Double)Value;
        }
        private object get_40_DateTimePicker_SelectorFormat(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorFormat;
        }
        private void set_40_DateTimePicker_SelectorFormat(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorFormat = (global::System.String)Value;
        }
        private object get_41_DateTimePicker_IsOpen(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsOpen;
        }
        private void set_41_DateTimePicker_IsOpen(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_42_DateTimePicker_SelectorDefaultValue(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorDefaultValue;
        }
        private void set_42_DateTimePicker_SelectorDefaultValue(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorDefaultValue = (global::System.Nullable<global::System.DateTime>)Value;
        }
        private object get_43_DateTimePicker_SelectorHeader(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeader;
        }
        private void set_43_DateTimePicker_SelectorHeader(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeader = (global::System.Object)Value;
        }
        private object get_44_DateTimePicker_SelectorHeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeaderTemplate;
        }
        private void set_44_DateTimePicker_SelectorHeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_45_DateTimePicker_ItemCount(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemCount;
        }
        private void set_45_DateTimePicker_ItemCount(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemCount = (global::System.Int32)Value;
        }
        private object get_46_RadHeaderedControl_Header(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.Header;
        }
        private void set_46_RadHeaderedControl_Header(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_47_RadHeaderedControl_HeaderTemplate(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderTemplate;
        }
        private void set_47_RadHeaderedControl_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_48_RadHeaderedControl_HeaderStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderStyle;
        }
        private void set_48_RadHeaderedControl_HeaderStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_49_RadControl_CurrentVisualState(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }
        private object get_50_ChartAnnotationLabelDefinition_Format(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Format;
        }
        private void set_50_ChartAnnotationLabelDefinition_Format(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Format = (global::System.String)Value;
        }
        private object get_51_ChartAnnotationLabelDefinition_Template(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Template;
        }
        private void set_51_ChartAnnotationLabelDefinition_Template(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Template = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_52_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.DefaultVisualStyle;
        }
        private void set_52_ChartAnnotationLabelDefinition_DefaultVisualStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.DefaultVisualStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_53_ChartAnnotationLabelDefinition_Location(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.Location;
        }
        private void set_53_ChartAnnotationLabelDefinition_Location(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.Location = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation)Value;
        }
        private object get_54_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalAlignment;
        }
        private void set_54_ChartAnnotationLabelDefinition_HorizontalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalAlignment = (global::Windows.UI.Xaml.HorizontalAlignment)Value;
        }
        private object get_55_ChartAnnotationLabelDefinition_VerticalAlignment(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalAlignment;
        }
        private void set_55_ChartAnnotationLabelDefinition_VerticalAlignment(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalAlignment = (global::Windows.UI.Xaml.VerticalAlignment)Value;
        }
        private object get_56_ChartAnnotationLabelDefinition_HorizontalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.HorizontalOffset;
        }
        private void set_56_ChartAnnotationLabelDefinition_HorizontalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.HorizontalOffset = (global::System.Double)Value;
        }
        private object get_57_ChartAnnotationLabelDefinition_VerticalOffset(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            return that.VerticalOffset;
        }
        private void set_57_ChartAnnotationLabelDefinition_VerticalOffset(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition)instance;
            that.VerticalOffset = (global::System.Double)Value;
        }
        private object get_58_HighlightStyle_FontFamily(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontFamily;
        }
        private void set_58_HighlightStyle_FontFamily(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontFamily = (global::Windows.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_59_HighlightStyle_FontWeight(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontWeight;
        }
        private void set_59_HighlightStyle_FontWeight(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontWeight = (global::Telerik.UI.Xaml.Controls.Input.FontWeightName)Value;
        }
        private object get_60_HighlightStyle_FontStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontStyle;
        }
        private void set_60_HighlightStyle_FontStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontStyle = (global::Windows.UI.Text.FontStyle)Value;
        }
        private object get_61_HighlightStyle_Foreground(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.Foreground;
        }
        private void set_61_HighlightStyle_Foreground(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_62_HighlightStyle_FontSize(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            return that.FontSize;
        }
        private void set_62_HighlightStyle_FontSize(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.HighlightStyle)instance;
            that.FontSize = (global::System.Double)Value;
        }
        private object get_63_CalendarCellStyle_ContentStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.ContentStyle;
        }
        private void set_63_CalendarCellStyle_ContentStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.ContentStyle = (global::Windows.UI.Xaml.Style)Value;
        }
        private object get_64_CalendarCellStyle_DecorationStyle(object instance)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            return that.DecorationStyle;
        }
        private void set_64_CalendarCellStyle_DecorationStyle(object instance, object Value)
        {
            var that = (global::Telerik.UI.Xaml.Controls.Input.CalendarCellStyle)instance;
            that.DecorationStyle = (global::Windows.UI.Xaml.Style)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember xamlMember = null;
            global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "JobOrganizer.ViewModels.AppViewModel.Month":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Month", "JobOrganizer.ViewModels.MonthViewModel");
                xamlMember.Getter = get_0_AppViewModel_Month;
                xamlMember.Setter = set_0_AppViewModel_Month;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.Week":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Week", "JobOrganizer.ViewModels.WeekViewModel");
                xamlMember.Getter = get_1_AppViewModel_Week;
                xamlMember.Setter = set_1_AppViewModel_Week;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TodayTasks":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TodayTasks", "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>");
                xamlMember.Getter = get_2_AppViewModel_TodayTasks;
                xamlMember.Setter = set_2_AppViewModel_TodayTasks;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.Title":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_3_TaskViewModel_Title;
                xamlMember.Setter = set_3_TaskViewModel_Title;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.Message":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.Getter = get_4_TaskViewModel_Message;
                xamlMember.Setter = set_4_TaskViewModel_Message;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.Start":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Start", "System.DateTime");
                xamlMember.Getter = get_5_TaskViewModel_Start;
                xamlMember.Setter = set_5_TaskViewModel_Start;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.End":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "End", "System.DateTime");
                xamlMember.Getter = get_6_TaskViewModel_End;
                xamlMember.Setter = set_6_TaskViewModel_End;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.Until":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Until", "System.DateTime");
                xamlMember.Getter = get_7_TaskViewModel_Until;
                xamlMember.Setter = set_7_TaskViewModel_Until;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.Repeat":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Repeat", "JobOrganizer.Enumerations.RepeatInterval");
                xamlMember.Getter = get_8_TaskViewModel_Repeat;
                xamlMember.Setter = set_8_TaskViewModel_Repeat;
                break;
            case "JobOrganizer.ViewModels.TaskViewModel.StartString":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.TaskViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "StartString", "String");
                xamlMember.Getter = get_9_TaskViewModel_StartString;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TomorrowTasks":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TomorrowTasks", "System.Collections.Generic.IList<JobOrganizer.ViewModels.TaskViewModel>");
                xamlMember.Getter = get_10_AppViewModel_TomorrowTasks;
                xamlMember.Setter = set_10_AppViewModel_TomorrowTasks;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskStartDate":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskStartDate", "System.DateTime");
                xamlMember.Getter = get_11_AppViewModel_TaskStartDate;
                xamlMember.Setter = set_11_AppViewModel_TaskStartDate;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskStartTime":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskStartTime", "System.DateTime");
                xamlMember.Getter = get_12_AppViewModel_TaskStartTime;
                xamlMember.Setter = set_12_AppViewModel_TaskStartTime;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskEndDate":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskEndDate", "System.DateTime");
                xamlMember.Getter = get_13_AppViewModel_TaskEndDate;
                xamlMember.Setter = set_13_AppViewModel_TaskEndDate;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskEndTime":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskEndTime", "System.DateTime");
                xamlMember.Getter = get_14_AppViewModel_TaskEndTime;
                xamlMember.Setter = set_14_AppViewModel_TaskEndTime;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskUntil":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskUntil", "System.DateTime");
                xamlMember.Getter = get_15_AppViewModel_TaskUntil;
                xamlMember.Setter = set_15_AppViewModel_TaskUntil;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskRepeat":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskRepeat", "String");
                xamlMember.Getter = get_16_AppViewModel_TaskRepeat;
                xamlMember.Setter = set_16_AppViewModel_TaskRepeat;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskTitle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskTitle", "String");
                xamlMember.Getter = get_17_AppViewModel_TaskTitle;
                xamlMember.Setter = set_17_AppViewModel_TaskTitle;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.TaskMessage":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "TaskMessage", "String");
                xamlMember.Getter = get_18_AppViewModel_TaskMessage;
                xamlMember.Setter = set_18_AppViewModel_TaskMessage;
                break;
            case "JobOrganizer.ViewModels.AppViewModel.PrevMonth":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "PrevMonth", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_19_AppViewModel_PrevMonth;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.NextMonth":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "NextMonth", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_20_AppViewModel_NextMonth;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.PrevWeek":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "PrevWeek", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_21_AppViewModel_PrevWeek;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.NextWeek":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "NextWeek", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_22_AppViewModel_NextWeek;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.CreateTask":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "CreateTask", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_23_AppViewModel_CreateTask;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.CancelCreateTask":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "CancelCreateTask", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_24_AppViewModel_CancelCreateTask;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.SaveTasksCommand":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SaveTasksCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_25_AppViewModel_SaveTasksCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "JobOrganizer.ViewModels.AppViewModel.LoadTasksCommand":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("JobOrganizer.ViewModels.AppViewModel");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "LoadTasksCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_26_AppViewModel_LoadTasksCommand;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.Value":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Value", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_DateTimePicker_Value;
                xamlMember.Setter = set_27_DateTimePicker_Value;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MinValue":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "MinValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_DateTimePicker_MinValue;
                xamlMember.Setter = set_28_DateTimePicker_MinValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.DisplayMode":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "DisplayMode", "Telerik.UI.Xaml.Controls.Input.DateTimePickerDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_DateTimePicker_DisplayMode;
                xamlMember.Setter = set_29_DateTimePicker_DisplayMode;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.AutoSizeWidth":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "AutoSizeWidth", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_DateTimePicker_AutoSizeWidth;
                xamlMember.Setter = set_30_DateTimePicker_AutoSizeWidth;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsReadOnly":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_DateTimePicker_IsReadOnly;
                xamlMember.Setter = set_31_DateTimePicker_IsReadOnly;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContent":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_DateTimePicker_EmptyContent;
                xamlMember.Setter = set_32_DateTimePicker_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContentTemplate":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_DateTimePicker_EmptyContentTemplate;
                xamlMember.Setter = set_33_DateTimePicker_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.DisplayValueFormat":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "DisplayValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_DateTimePicker_DisplayValueFormat;
                xamlMember.Setter = set_34_DateTimePicker_DisplayValueFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ValueString":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "ValueString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_DateTimePicker_ValueString;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MaxValue":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "MaxValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_DateTimePicker_MaxValue;
                xamlMember.Setter = set_36_DateTimePicker_MaxValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorBackgroundStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SelectorBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_DateTimePicker_SelectorBackgroundStyle;
                xamlMember.Setter = set_37_DateTimePicker_SelectorBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemLength":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_DateTimePicker_ItemLength;
                xamlMember.Setter = set_38_DateTimePicker_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemSpacing":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "ItemSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_DateTimePicker_ItemSpacing;
                xamlMember.Setter = set_39_DateTimePicker_ItemSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorFormat":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SelectorFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_DateTimePicker_SelectorFormat;
                xamlMember.Setter = set_40_DateTimePicker_SelectorFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsOpen":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_DateTimePicker_IsOpen;
                xamlMember.Setter = set_41_DateTimePicker_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorDefaultValue":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SelectorDefaultValue", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_DateTimePicker_SelectorDefaultValue;
                xamlMember.Setter = set_42_DateTimePicker_SelectorDefaultValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeader":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SelectorHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_DateTimePicker_SelectorHeader;
                xamlMember.Setter = set_43_DateTimePicker_SelectorHeader;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeaderTemplate":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "SelectorHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_DateTimePicker_SelectorHeaderTemplate;
                xamlMember.Setter = set_44_DateTimePicker_SelectorHeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemCount":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "ItemCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_DateTimePicker_ItemCount;
                xamlMember.Setter = set_45_DateTimePicker_ItemCount;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.Header":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_RadHeaderedControl_Header;
                xamlMember.Setter = set_46_RadHeaderedControl_Header;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderTemplate":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_RadHeaderedControl_HeaderTemplate;
                xamlMember.Setter = set_47_RadHeaderedControl_HeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_RadHeaderedControl_HeaderStyle;
                xamlMember.Setter = set_48_RadHeaderedControl_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_49_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Format":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Format", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ChartAnnotationLabelDefinition_Format;
                xamlMember.Setter = set_50_ChartAnnotationLabelDefinition_Format;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Template":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Template", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_ChartAnnotationLabelDefinition_Template;
                xamlMember.Setter = set_51_ChartAnnotationLabelDefinition_Template;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.DefaultVisualStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "DefaultVisualStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                xamlMember.Setter = set_52_ChartAnnotationLabelDefinition_DefaultVisualStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.Location":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Location", "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelLocation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_ChartAnnotationLabelDefinition_Location;
                xamlMember.Setter = set_53_ChartAnnotationLabelDefinition_Location;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalAlignment":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "HorizontalAlignment", "Windows.UI.Xaml.HorizontalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_ChartAnnotationLabelDefinition_HorizontalAlignment;
                xamlMember.Setter = set_54_ChartAnnotationLabelDefinition_HorizontalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalAlignment":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "VerticalAlignment", "Windows.UI.Xaml.VerticalAlignment");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_ChartAnnotationLabelDefinition_VerticalAlignment;
                xamlMember.Setter = set_55_ChartAnnotationLabelDefinition_VerticalAlignment;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.HorizontalOffset":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "HorizontalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_ChartAnnotationLabelDefinition_HorizontalOffset;
                xamlMember.Setter = set_56_ChartAnnotationLabelDefinition_HorizontalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition.VerticalOffset":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Chart.ChartAnnotationLabelDefinition");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "VerticalOffset", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_ChartAnnotationLabelDefinition_VerticalOffset;
                xamlMember.Setter = set_57_ChartAnnotationLabelDefinition_VerticalOffset;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontFamily":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "FontFamily", "Windows.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_HighlightStyle_FontFamily;
                xamlMember.Setter = set_58_HighlightStyle_FontFamily;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontWeight":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "FontWeight", "Telerik.UI.Xaml.Controls.Input.FontWeightName");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_HighlightStyle_FontWeight;
                xamlMember.Setter = set_59_HighlightStyle_FontWeight;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "FontStyle", "Windows.UI.Text.FontStyle");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_HighlightStyle_FontStyle;
                xamlMember.Setter = set_60_HighlightStyle_FontStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.Foreground":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_HighlightStyle_Foreground;
                xamlMember.Setter = set_61_HighlightStyle_Foreground;
                break;
            case "Telerik.UI.Xaml.Controls.Input.HighlightStyle.FontSize":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.HighlightStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_62_HighlightStyle_FontSize;
                xamlMember.Setter = set_62_HighlightStyle_FontSize;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.ContentStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "ContentStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_63_CalendarCellStyle_ContentStyle;
                xamlMember.Setter = set_63_CalendarCellStyle_ContentStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.CalendarCellStyle.DecorationStyle":
                userType = (global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.CalendarCellStyle");
                xamlMember = new global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlMember(this, "DecorationStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_64_CalendarCellStyle_DecorationStyle;
                xamlMember.Setter = set_64_CalendarCellStyle_DecorationStyle;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlSystemBaseType
    {
        global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::JobOrganizer.JobOrganizer_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


